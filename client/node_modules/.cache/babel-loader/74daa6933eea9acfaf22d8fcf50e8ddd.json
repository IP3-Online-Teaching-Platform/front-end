{"ast":null,"code":"var _jsxFileName = \"/Users/johnmcleodbrown/Desktop/IP3frontend/front-end/client/src/Components/TextChat/TextChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { auth, db } from '../Auth/Firebase-Auth';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TextChat = () => {\n  _s();\n\n  const [chatsMap, setChatsMap] = useState(undefined);\n  const [messages, setMessages] = useState([]);\n  const [msgcontent, setMsgContent] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [userToMessage, setUserToMessage] = useState('');\n  const [conversationNames, setConvoNames] = useState([]);\n\n  const handleSendMessage = async event => {\n    event.preventDefault();\n\n    if (!userToMessage) {\n      return console.log('No user to message found');\n    }\n\n    let sortedUsers = [auth.currentUser.uid, userToMessage].sort();\n    let docname = sortedUsers.join('|');\n    const docRef = db.collection('conversations').doc(docname);\n    const doc = await docRef.get();\n    const docData = doc.data();\n    db.collection('conversations').doc(docname).set({\n      recentMessage: {\n        timestamp: moment().unix() * 1000,\n        content: msgcontent,\n        author: auth.currentUser.uid\n      },\n      users: sortedUsers,\n      created: docData.created\n    });\n    db.collection('conversations').doc(docname).collection('messages').add({\n      timestamp: moment().unix() * 1000,\n      content: msgcontent,\n      author: auth.currentUser.uid\n    });\n    setMsgContent('');\n  };\n\n  const getConversations = () => {\n    return new Promise(async (resolve, reject) => {\n      const convosRef = db.collection('conversations');\n      const chats = await convosRef.where('users', 'array-contains', auth.currentUser.uid).get();\n      let allChats = [];\n      let allConvoNames = [];\n      chats.forEach(chat => {\n        let chatdata = chat.data();\n        allChats.push(chatdata);\n        allConvoNames.push(`${chatdata.users[0]}|${chatdata.users[1]}`);\n      });\n\n      const chatsMap = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: allChats.map(chat => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-contact\",\n          onClick: () => {\n            getRealTimeMessages(chat.users[0] === auth.currentUser.uid ? chat.users[1] : chat.users[0]);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-contact-name\",\n            children: chat.users[0] === auth.currentUser.uid ? chat.users[1] : chat.users[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-contact-preview\",\n            children: chat.recentMessage.content.substring(0, 15) + \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this);\n\n      setChatsMap(chatsMap);\n      setConvoNames(allConvoNames);\n      resolve(true);\n    });\n  };\n\n  const getRealTimeMessages = uid => {\n    let userToMessage = uid;\n    setUserToMessage(userToMessage);\n    const messageContainer = document.getElementById('chat-message-container');\n    db.collection('conversations').doc([auth.currentUser.uid, userToMessage].sort().join('|')).collection('messages').onSnapshot(snapshot => {\n      let messages = snapshot.docs.map(doc => doc.data());\n      messages.sort((a, b) => {\n        return a.timestamp - b.timestamp;\n      });\n\n      const messageDisplay = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-title\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-title-name\",\n            children: userToMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-chat\",\n          id: \"chat-message-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: message.author === auth.currentUser.uid ? 'message-one' : 'message-two',\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: message.author === auth.currentUser.uid ? 'chat-name-picture' : 'chat-name-picture2',\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-name\",\n                children: message.author === auth.currentUser.uid ? 'You' : userToMessage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"chat-timestamp\",\n                children: moment(message.timestamp).format('HH:mm')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: message.author === auth.currentUser.uid ? 'message-text-container' : 'message-text-container2',\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: message.author === auth.currentUser.uid ? 'message-text' : 'message-text2',\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true);\n\n      setMessages(messageDisplay);\n\n      if (messageContainer) {\n        messageContainer.scrollTop = messageContainer.scrollHeight;\n      }\n    });\n  }; // const handleLoadMessages = async (uid) => {\n  //     let userToMessage = uid\n  //     setUserToMessage(userToMessage);\n  //     const convoRef = db.collection('conversations').doc([auth.currentUser.uid, userToMessage].sort().join('|')).collection('messages');\n  //     const messagesRef = await convoRef.get();\n  //     let messages = []\n  //     messagesRef.forEach(message => {\n  //         messages.push(message.data());\n  //     })\n  //     messages.sort((a, b) => {\n  //         return a.timestamp - b.timestamp;\n  //     });\n  //     const messageDisplay = (\n  //         <div className=\"main-chat\">\n  //             <div className=\"chat-title\">\n  //                 <div className=\"chat-title-name\">{userToMessage}</div>\n  //             </div>\n  //             {messages.map(message => (\n  //                 <div className={message.author === auth.currentUser.uid ? 'message-one' : 'message-two'}>\n  //                     <div className={message.author === auth.currentUser.uid ? 'chat-name-picture' : 'chat-name-picture2'}>\n  //                         <div className=\"chat-name\">{message.author === auth.currentUser.uid ? 'You' : userToMessage}</div>\n  //                         <div className=\"chat-timestamp\">{moment(message.timestamp).format('HH:mm')}</div>\n  //                     </div>\n  //                     <div className={message.author === auth.currentUser.uid ? 'message-text-container' : 'message-text-container2'}>\n  //                         <div className={message.author === auth.currentUser.uid ? 'message-text' : 'message-text2'}>\n  //                             {message.content}\n  //                         </div>\n  //                     </div>\n  //                 </div>\n  //             ))}\n  //         </div>\n  //     )\n  //     setMessages(messageDisplay);\n  // }\n\n\n  if (loading) {\n    getConversations().then(success => {\n      if (success) {\n        setLoading(false);\n      }\n    });\n  }\n\n  const onChangeHandler = event => {\n    const {\n      name,\n      value\n    } = event.currentTarget;\n\n    if (name === \"msgcontent\") {\n      setMsgContent(value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tutors-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [messages ? messages : '', /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-typing\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"chat-input\",\n          name: \"msgcontent\",\n          value: msgcontent,\n          onChange: event => onChangeHandler(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"class-buttons-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-attachments\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-paper-plane input-send\",\n              onClick: event => {\n                handleSendMessage(event);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tutors-details-container-main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-list\",\n        children: chatsMap ? chatsMap : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextChat, \"HsqdroLjr/GYyb9+C583ApkTcH0=\");\n\n_c = TextChat;\nexport default TextChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextChat\");","map":{"version":3,"sources":["/Users/johnmcleodbrown/Desktop/IP3frontend/front-end/client/src/Components/TextChat/TextChat.js"],"names":["React","useState","auth","db","moment","TextChat","chatsMap","setChatsMap","undefined","messages","setMessages","msgcontent","setMsgContent","loading","setLoading","userToMessage","setUserToMessage","conversationNames","setConvoNames","handleSendMessage","event","preventDefault","console","log","sortedUsers","currentUser","uid","sort","docname","join","docRef","collection","doc","get","docData","data","set","recentMessage","timestamp","unix","content","author","users","created","add","getConversations","Promise","resolve","reject","convosRef","chats","where","allChats","allConvoNames","forEach","chat","chatdata","push","map","getRealTimeMessages","substring","messageContainer","document","getElementById","onSnapshot","snapshot","docs","a","b","messageDisplay","message","format","scrollTop","scrollHeight","then","success","onChangeHandler","name","value","currentTarget"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { auth, db } from '../Auth/Firebase-Auth';\nimport moment from 'moment';\n\nconst TextChat = () => {\n    const [chatsMap, setChatsMap] = useState(undefined);\n    const [messages, setMessages] = useState([]);\n    const [msgcontent, setMsgContent] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [userToMessage, setUserToMessage] = useState('');\n    const [conversationNames, setConvoNames] = useState([]);\n\n    const handleSendMessage = async (event) => {\n        event.preventDefault();\n\n        if (!userToMessage) {\n            return console.log('No user to message found');\n        }\n\n        let sortedUsers = [auth.currentUser.uid, userToMessage].sort()\n        let docname = sortedUsers.join('|');\n\n        const docRef = db.collection('conversations').doc(docname);\n        const doc = await docRef.get();\n        const docData = doc.data();\n\n        db.collection('conversations').doc(docname).set(\n            {\n                recentMessage: {\n                    timestamp: moment().unix() * 1000,\n                    content: msgcontent,\n                    author: auth.currentUser.uid\n                },\n                users: sortedUsers,\n                created: docData.created\n            }\n        )\n\n        db.collection('conversations').doc(docname).collection('messages').add(\n            {\n                timestamp: moment().unix() * 1000,\n                content: msgcontent,\n                author: auth.currentUser.uid\n            }\n        )\n\n        setMsgContent('');\n    }\n\n    const getConversations = () => {\n        return new Promise(async (resolve, reject) => {\n            const convosRef = db.collection('conversations');\n            const chats = await convosRef.where('users', 'array-contains', auth.currentUser.uid).get();\n\n            let allChats = []\n            let allConvoNames = []\n            chats.forEach(chat => {\n                let chatdata = chat.data();\n                allChats.push(chatdata);\n                allConvoNames.push(`${chatdata.users[0]}|${chatdata.users[1]}`);\n            })\n\n            const chatsMap = (\n                <div>\n                    {allChats.map(chat => (\n                        <div className=\"chat-contact\" onClick={() => { getRealTimeMessages(chat.users[0] === auth.currentUser.uid ? chat.users[1] : chat.users[0]) }}>\n                            <div className='chat-contact-name'>{chat.users[0] === auth.currentUser.uid ? chat.users[1] : chat.users[0]}</div>\n                            <div className='chat-contact-preview'>{chat.recentMessage.content.substring(0, 15) + \"...\"}</div>\n                        </div>\n                    ))}\n                </div>\n            )\n            setChatsMap(chatsMap);\n            setConvoNames(allConvoNames);\n            resolve(true);\n        })\n    }\n\n    const getRealTimeMessages = (uid) => {\n        let userToMessage = uid\n        setUserToMessage(userToMessage);\n        const messageContainer = document.getElementById('chat-message-container');\n        db.collection('conversations').doc([auth.currentUser.uid, userToMessage].sort().join('|')).collection('messages')\n            .onSnapshot(snapshot => {\n                let messages = snapshot.docs.map(doc => doc.data());\n                messages.sort((a, b) => {\n                    return a.timestamp - b.timestamp;\n                });\n                const messageDisplay = (\n                    <>\n                        <div className=\"chat-title\">\n                            <div className=\"chat-title-name\">{userToMessage}</div>\n                        </div>\n                        <div className=\"main-chat\" id=\"chat-message-container\">\n                            {messages.map(message => (\n                                <div className={message.author === auth.currentUser.uid ? 'message-one' : 'message-two'}>\n                                    <div className={message.author === auth.currentUser.uid ? 'chat-name-picture' : 'chat-name-picture2'}>\n                                        <div className=\"chat-name\">{message.author === auth.currentUser.uid ? 'You' : userToMessage}</div>\n                                        <div className=\"chat-timestamp\">{moment(message.timestamp).format('HH:mm')}</div>\n                                    </div>\n                                    <div className={message.author === auth.currentUser.uid ? 'message-text-container' : 'message-text-container2'}>\n                                        <div className={message.author === auth.currentUser.uid ? 'message-text' : 'message-text2'}>\n                                            {message.content}\n                                        </div>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </>\n                )\n                setMessages(messageDisplay);\n                if(messageContainer){\n                    messageContainer.scrollTop = messageContainer.scrollHeight;\n                }\n            });\n    }\n\n    // const handleLoadMessages = async (uid) => {\n    //     let userToMessage = uid\n    //     setUserToMessage(userToMessage);\n    //     const convoRef = db.collection('conversations').doc([auth.currentUser.uid, userToMessage].sort().join('|')).collection('messages');\n    //     const messagesRef = await convoRef.get();\n    //     let messages = []\n    //     messagesRef.forEach(message => {\n    //         messages.push(message.data());\n    //     })\n    //     messages.sort((a, b) => {\n    //         return a.timestamp - b.timestamp;\n    //     });\n\n    //     const messageDisplay = (\n    //         <div className=\"main-chat\">\n    //             <div className=\"chat-title\">\n    //                 <div className=\"chat-title-name\">{userToMessage}</div>\n    //             </div>\n    //             {messages.map(message => (\n    //                 <div className={message.author === auth.currentUser.uid ? 'message-one' : 'message-two'}>\n    //                     <div className={message.author === auth.currentUser.uid ? 'chat-name-picture' : 'chat-name-picture2'}>\n    //                         <div className=\"chat-name\">{message.author === auth.currentUser.uid ? 'You' : userToMessage}</div>\n    //                         <div className=\"chat-timestamp\">{moment(message.timestamp).format('HH:mm')}</div>\n    //                     </div>\n    //                     <div className={message.author === auth.currentUser.uid ? 'message-text-container' : 'message-text-container2'}>\n    //                         <div className={message.author === auth.currentUser.uid ? 'message-text' : 'message-text2'}>\n    //                             {message.content}\n    //                         </div>\n    //                     </div>\n    //                 </div>\n    //             ))}\n    //         </div>\n    //     )\n    //     setMessages(messageDisplay);\n    // }\n\n    if (loading) {\n        getConversations().then(success => {\n            if (success) {\n                setLoading(false);\n            }\n        });\n    }\n\n    const onChangeHandler = (event) => {\n        const { name, value } = event.currentTarget;\n        if (name === \"msgcontent\") {\n            setMsgContent(value);\n        }\n    };\n\n    return (\n        <div className=\"tutors-container\">\n            <div className=\"chat-container\">\n                {messages ? messages : ''}\n                <div className=\"chat-typing\">\n                    <input type=\"text\" className=\"chat-input\" name=\"msgcontent\" value={msgcontent} onChange={(event) => onChangeHandler(event)} />\n                    <div className=\"class-buttons-container\">\n                        <div className=\"chat-attachments\">\n                            <i className=\"fas fa-paper-plane input-send\" onClick={(event) => { handleSendMessage(event) }}></i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"tutors-details-container-main\">\n\n                <div className=\"chat-list\">\n                    {chatsMap ? chatsMap : ''}\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default TextChat;"]},"metadata":{},"sourceType":"module"}