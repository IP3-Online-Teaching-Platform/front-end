{"ast":null,"code":"import { auth } from '../Auth/Firebase-Auth';\nimport https from 'https';\nexport const postNewStudent = (userdata, event) => {\n  auth.currentUser.api = userdata;\n  return new Promise(async (resolve, reject) => {\n    event.preventDefault();\n    const newUserResponse = await postNewStudentAPI(userdata).catch(err => {\n      return reject(err);\n    });\n    console.log(`Post New Student Response: ${JSON.parse(newUserResponse)}`);\n    return resolve(JSON.parse(newUserResponse));\n  });\n};\nexport const postNewTutor = (userdata, event) => {\n  auth.currentUser.api = userdata;\n  return new Promise(async (resolve, reject) => {\n    event.preventDefault();\n    const newUserResponse = await postNewTutorAPI(userdata).catch(err => {\n      return reject(err);\n    });\n    console.log(`Post New Tutor Response: ${JSON.parse(newUserResponse)}`);\n    return resolve(JSON.parse(newUserResponse));\n  });\n};\nexport const getStudent = async () => {\n  const userData = await getStudentAPI().catch(err => console.log(err));\n  console.log(`Get Student Data Response: ${JSON.parse(userData)}`);\n  auth.currentUser.api = userData;\n};\nexport const getTutor = async () => {\n  const userData = await getTutorAPI().catch(err => console.log(err));\n  console.log(`Get Tutor Data Response: ${JSON.parse(userData)}`);\n  auth.currentUser.api = userData;\n};\n\nasync function postNewStudentAPI(userdata) {\n  return new Promise(async (resolve, reject) => {\n    const body = JSON.stringify(userdata); //Get Firebase Auth token\n\n    const authtoken = await auth.currentUser.getIdToken(true).catch(err => {\n      return reject(err);\n    });\n    let responsedata = ''; //Prep GET options\n\n    const options = {\n      host: 'develop-dot-ip3-online-teaching-platform.appspot.com',\n      path: '/student/post',\n      method: 'POST',\n      headers: {\n        'Authorization': authtoken,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }; //Make API call\n\n    const req = https.request(options, res => {\n      res.on('data', d => {\n        responsedata += d;\n      });\n      res.on('end', () => {\n        return resolve(responsedata);\n      });\n    });\n    req.write(body);\n    req.end();\n  });\n}\n\nasync function postNewTutorAPI(userdata) {\n  return new Promise(async (resolve, reject) => {\n    const body = JSON.stringify(userdata); //Get Firebase Auth token\n\n    const authtoken = await auth.currentUser.getIdToken(true).catch(err => {\n      return reject(err);\n    });\n    let responsedata = ''; //Prep GET options\n\n    const options = {\n      host: 'develop-dot-ip3-online-teaching-platform.appspot.com',\n      path: '/professor/post',\n      method: 'POST',\n      headers: {\n        'Authorization': authtoken,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }; //Make API call\n\n    const req = https.request(options, res => {\n      res.on('data', d => {\n        responsedata += d;\n      });\n      res.on('end', () => {\n        return resolve(responsedata);\n      });\n    });\n    req.write(body);\n    req.end();\n  });\n}\n\nasync function getStudentAPI() {\n  return new Promise(async (resolve, reject) => {\n    let responsedata = ''; //Get firebase data\n\n    const authtoken = await auth.currentUser.getIdToken(true).catch(err => {\n      return reject(err);\n    }); //GET options\n\n    const options = {\n      host: 'develop-dot-ip3-online-teaching-platform.appspot.com',\n      path: `/student/get`,\n      method: 'GET',\n      headers: {\n        'Authorization': authtoken,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }; //Make API call\n\n    https.get(options, res => {\n      res.on('data', d => {\n        responsedata += d;\n      });\n      res.on('end', () => {\n        return resolve(responsedata);\n      });\n    });\n  });\n}\n\nasync function getTutorAPI() {\n  return new Promise(async (resolve, reject) => {\n    let responsedata = ''; //Get firebase data\n\n    const authtoken = await auth.currentUser.getIdToken(true).catch(err => {\n      return reject(err);\n    }); //GET options\n\n    const options = {\n      host: 'develop-dot-ip3-online-teaching-platform.appspot.com',\n      path: `/professor/get`,\n      method: 'GET',\n      headers: {\n        'Authorization': authtoken,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=UTF-8'\n      }\n    }; //Make API call\n\n    https.get(options, res => {\n      res.on('data', d => {\n        responsedata += d;\n      });\n      res.on('end', () => {\n        return resolve(responsedata);\n      });\n    });\n  });\n}","map":{"version":3,"sources":["/Users/johnmcleodbrown/Desktop/IP3frontend/front-end/client/src/Components/Auth/API.js"],"names":["auth","https","postNewStudent","userdata","event","currentUser","api","Promise","resolve","reject","preventDefault","newUserResponse","postNewStudentAPI","catch","err","console","log","JSON","parse","postNewTutor","postNewTutorAPI","getStudent","userData","getStudentAPI","getTutor","getTutorAPI","body","stringify","authtoken","getIdToken","responsedata","options","host","path","method","headers","req","request","res","on","d","write","end","get"],"mappings":"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","sourcesContent":["import { auth } from '../Auth/Firebase-Auth';\nimport https from 'https';\n\nexport const postNewStudent = (userdata, event) => {\n    auth.currentUser.api = userdata;\n    return new Promise(async (resolve, reject) => {\n        event.preventDefault();\n        const newUserResponse = await postNewStudentAPI(userdata)\n            .catch(err => { return reject(err) });\n        console.log(`Post New Student Response: ${JSON.parse(newUserResponse)}`);\n        return resolve(JSON.parse(newUserResponse));\n    })\n}\n\nexport const postNewTutor = (userdata, event) => {\n    auth.currentUser.api = userdata;\n    return new Promise(async (resolve, reject) => {\n        event.preventDefault();\n        const newUserResponse = await postNewTutorAPI(userdata)\n            .catch(err => { return reject(err) });\n        console.log(`Post New Tutor Response: ${JSON.parse(newUserResponse)}`);\n        return resolve(JSON.parse(newUserResponse));\n    })\n}\n\nexport const getStudent = async () => {\n    const userData = await getStudentAPI()\n        .catch(err => console.log(err));\n    console.log(`Get Student Data Response: ${JSON.parse(userData)}`);\n    auth.currentUser.api = userData;\n}\n\nexport const getTutor = async () => {\n    const userData = await getTutorAPI()\n        .catch(err => console.log(err));\n    console.log(`Get Tutor Data Response: ${JSON.parse(userData)}`);\n    auth.currentUser.api = userData;\n}\n\nasync function postNewStudentAPI(userdata) {\n    return new Promise(async (resolve, reject) => {\n        const body = JSON.stringify(userdata)\n        //Get Firebase Auth token\n        const authtoken = await auth.currentUser.getIdToken(true)\n            .catch(err => { return reject(err) })\n        let responsedata = '';\n        //Prep GET options\n        const options = {\n            host: 'develop-dot-ip3-online-teaching-platform.appspot.com',\n            path: '/student/post',\n            method: 'POST',\n            headers: {\n                'Authorization': authtoken,\n                'Accept': 'application/json',\n                'Content-Type': 'application/json; charset=UTF-8'\n            }\n        };\n        //Make API call\n        const req = https.request(options, (res) => {\n            res.on('data', (d) => {\n                responsedata += d;\n            });\n            res.on('end', () => {\n                return resolve(responsedata);\n            });\n        });\n        req.write(body);\n        req.end();\n    });\n}\nasync function postNewTutorAPI(userdata) {\n    return new Promise(async (resolve, reject) => {\n        const body = JSON.stringify(userdata)\n        //Get Firebase Auth token\n        const authtoken = await auth.currentUser.getIdToken(true)\n            .catch(err => { return reject(err) })\n        let responsedata = '';\n        //Prep GET options\n        const options = {\n            host: 'develop-dot-ip3-online-teaching-platform.appspot.com',\n            path: '/professor/post',\n            method: 'POST',\n            headers: {\n                'Authorization': authtoken,\n                'Accept': 'application/json',\n                'Content-Type': 'application/json; charset=UTF-8'\n            }\n        };\n        //Make API call\n        const req = https.request(options, (res) => {\n            res.on('data', (d) => {\n                responsedata += d;\n            });\n            res.on('end', () => {\n                return resolve(responsedata);\n            });\n        });\n        req.write(body);\n        req.end();\n    });\n}\n\nasync function getStudentAPI() {\n    return new Promise(async (resolve, reject) => {\n        let responsedata = '';\n\n        //Get firebase data\n        const authtoken = await auth.currentUser.getIdToken(true)\n            .catch(err => { return reject(err) });\n\n        //GET options\n        const options = {\n            host: 'develop-dot-ip3-online-teaching-platform.appspot.com',\n            path: `/student/get`,\n            method: 'GET',\n            headers: {\n                'Authorization': authtoken,\n                'Accept': 'application/json',\n                'Content-Type': 'application/json; charset=UTF-8'\n            }\n        };\n\n        //Make API call\n        https.get(options, (res) => {\n            res.on('data', (d) => {\n                responsedata += d;\n            });\n            res.on('end', () => {\n                return resolve(responsedata);\n            })\n        });\n    });\n}\n\nasync function getTutorAPI() {\n    return new Promise(async (resolve, reject) => {\n        let responsedata = '';\n\n        //Get firebase data\n        const authtoken = await auth.currentUser.getIdToken(true)\n            .catch(err => { return reject(err) });\n\n        //GET options\n        const options = {\n            host: 'develop-dot-ip3-online-teaching-platform.appspot.com',\n            path: `/professor/get`,\n            method: 'GET',\n            headers: {\n                'Authorization': authtoken,\n                'Accept': 'application/json',\n                'Content-Type': 'application/json; charset=UTF-8'\n            }\n        };\n\n        //Make API call\n        https.get(options, (res) => {\n            res.on('data', (d) => {\n                responsedata += d;\n            });\n            res.on('end', () => {\n                return resolve(responsedata);\n            })\n        });\n    });\n}"]},"metadata":{},"sourceType":"module"}